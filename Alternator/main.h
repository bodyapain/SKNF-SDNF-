#pragma once
#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <sstream>
#include <string>
#include <cstdlib>
#include <time.h>
#include <random>
#include <iterator>
#include <list>
#include <stack>
#include <bitset>
#include <fstream>
#include <conio.h>
using namespace std;


#define MAX_VARS 15     //максимальное количество переменных в формуле. МОЖНО РЕДАКТИРОВАТЬ (C++ не имеет встроенных динамических битовых шкал, сторонние работают хуже.
//Если удастся найти хорошую реализацию динамических шкал, программа будет доработана с их использованием. Это лишь тонкость реализации.


//Из-за того, что битовые шкалы статические, необходимо задать фиксированный размер. Эти значения можно менять, если Вам нужно больше переменных или более длинные формулы
#define NEW_ALGO_MAX_VARS 200
#define NEW_ALGO_STACK_LIMIT 50000

//Флаги для выбора режима калькулятора на ОПЗ (СКНФ или СДНф)
#define FLAG_SKNF -25 
#define FLAG_SDNF -50
//этот массив представляет собой дерево. Он нужен для определения подходящих операндов
//первая координата - числовое представление оператора минус 2. Вторая - желаемое значение. Так можно попасть в массив подходящих операндов.
//здесь отсутствует отрицание, т.к. его обработка тривиальна
#ifndef _MAIN_H_
#define _MAIN_H_
const short operands[7][2][7] = {
    { { 3, 1,0, 0,1, 0,0 }, { 1, 1,1, -1,-1, -1,-1 } },   // 2 умножение

    { { 1, 0,0, -1,-1, -1,-1 }, { 3, 0,1, 1,0, 1,1 } },   // 3 сложение

    { { 2, 0,0, 1,1, -1,-1 }, { 2, 0,1, 1,0, -1,-1 } },   // 4 XOR

    { { 1, 1,0, -1,-1, -1,-1 }, { 3, 1,1, 0,0, 0,1 } },   // 5 импликация

    { { 2, 0,0, 1,1, -1,-1 }, { 2, 0,1, 1,0, -1,-1 } },   // 6 эквиваленция

    { { 1, 1,1, -1,-1, -1,-1 }, { 3, 1,0, 0,1, 0,0 } },   // 7 штрих шеффера

    { { 3, 0,1, 1,0, 1,1 }, { 1, 0,0, -1,-1, -1,-1 } },   // 8 стрелка пирса
};
#endif
